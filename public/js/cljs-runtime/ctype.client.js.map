{"version":3,"sources":["ctype/client.cljs"],"mappings":";AAIA,AAAKA,6BAAc,6CAAA,7CAACC;AACpB,AAAKC,yBAAU,gDAAA,2CAAA,2DAAA,tJAACC;AAEhB,iCAAA,jCAAMC,0EAAcC;AAApB,AACE,oBAAA,AAAAC,gBAAON;AAAP,AACE,OAAA,AAAAM,gBAAQN,iCAAc,AAACO,eAAkB,AAACC,qBAAQH;;AADpD;;;AAGF,uCAAA,vCAAMI;AAAN,AACE,IAAMC,KAAG,KAAAC,UAAA;AAAT,AACE,AAACC,sBAAOZ,2BAAcU;;AAEtB,CAAM,AAAaA,eACb,WAAKG;AAAL,AACE,OAACD,sBAAOV,uBAAU,mIAAA,2EAAA,9MAACY,0DAAQ,AAACC,WAAc,AAAQF;;;AAE1D,QAAM,AAAWH,aACX;AAAA,AACE,iDAAA,jDAACE,sBAAOZ;;AACR,uDAAA,hDAACgB,WAAcP;;;AAE3B,mBAAA,nBAAMS;AAAN,AAAA,0FAAA,qEAAA,mFAAA,kDAAA,2BAAA,mFAAA,2EAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,wLAAA,+DAAA,WAAAD,5MAKoB,AAAA,yFAAA,AAAAX,gBAAWJ;AAL/B,AAMyB,IAAMiB,YAAU,AAAA,AAAAF;AAAhB,AACC,0FAAA,1FAACG,mDAAMlB,uBAAUmB,2EAAeF;;AAChC,sCAAA,AAAAb,/BAACF,+CAAcF;mBARzC,mFAAA,8CAAA,oBAS4B,AAAA,yFAAA,AAAAI,gBAAWJ;;AAEvC,oBAAA,pBAAeoB;AAAf,AACE,AAACb;;AACD,wDAAA,jDAACc,oIAAaL,yBAAK,wBAAA,xBAAiBM","names":["ctype.client/ws-connection","cljs.core.atom","ctype.client/app-state","reagent.core.atom","ctype.client/send-update!","new-data","cljs.core/deref","js/JSON.stringify","cljs.core/clj->js","ctype.client/connect-websocket!","ws","js/WebSocket","cljs.core/reset!","event","cljs.core.js__GT_clj","js/JSON.parse","js/setTimeout","p1__12377#","ctype.client/app","new-value","cljs.core.swap_BANG_","cljs.core/assoc","ctype.client/init","reagent.dom.render","js/document"],"sourcesContent":["(ns ctype.client\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]))\n\n(def ws-connection (atom nil))\n(def app-state (r/atom {:message \"Connecting...\"}))\n\n(defn send-update! [new-data]\n  (when @ws-connection\n    (.send @ws-connection (js/JSON.stringify (clj->js new-data)))))\n\n(defn connect-websocket! []\n  (let [ws (js/WebSocket. \"ws://localhost:8090\")]\n    (reset! ws-connection ws)\n    \n    (set! (.-onmessage ws)\n          (fn [event]\n            (reset! app-state (js->clj (js/JSON.parse (.-data event)) :keywordize-keys true))))\n    \n    (set! (.-onclose ws)\n          (fn []\n            (reset! ws-connection nil)\n            (js/setTimeout connect-websocket! 1000)))))\n\n(defn app []\n  [:div.container\n   [:h1 \"CType NW.js Demo\"]\n   [:div.message-box\n    [:input {:type \"text\"\n             :value (:message @app-state)\n             :on-change #(let [new-value (.. % -target -value)]\n                          (swap! app-state assoc :message new-value)\n                          (send-update! @app-state))}]\n    [:p \"Current message: \" (:message @app-state)]]])\n\n(defn ^:export init []\n  (connect-websocket!)\n  (rdom/render [app] (.getElementById js/document \"app\"))) "]}