{"version":3,"sources":["ctype/core.cljs"],"mappings":"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","names":["ctype.core/cljs-code","reagent.core.atom","ctype.core/js-code","ctype.core/ws-connection","ctype.core/connection-status","ctype.core/connect-websocket","ws","js/WebSocket","cljs.core/reset!","js/setTimeout","event","data","cljs.core.js__GT_clj","js/JSON.parse","G__12345","js/console.log","ctype.core/simple-code","ctype.core/magic-code","ctype.core/typed_add","a","b","ctype.core/typed_greet","name","ctype.core/demo-component","js/alert","cljs.core/deref","p1__12346#","p1__12347#","ctype.core/app","js/JSON.stringify","cljs.core/clj->js","ctype.core/init","reagent.dom.render","js/document","ctype.core/reload","cljs.core.println","ctype.core/-init","ctype.core/-reload"],"sourcesContent":["(ns ctype.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [cljs.nodejs :as nodejs]\n            [clojure.string :as str]\n            [ctype.transformer :as transformer]))\n\n;; State atoms\n(def cljs-code (r/atom \"(defn greet [name]\\n  (str \\\"Hello, \\\" name \\\"!\\\"))\\n\\n(defn calculate-sum [a b]\\n  (+ a b))\\n\\n(defn create-person [name age]\\n  {:name name\\n   :age age\\n   :greeting (greet name)})\"))\n\n(def js-code (r/atom \"function greet(name) {\\n  return `Hello, ${name}!`;\\n}\\n\\nfunction calculateSum(a, b) {\\n  return a + b;\\n}\\n\\nfunction createPerson(name, age) {\\n  return {\\n    name: name,\\n    age: age,\\n    greeting: greet(name)\\n  };\\n}\"))\n\n;; WebSocket connection\n(def ws-connection (r/atom nil))\n(def connection-status (r/atom \"Disconnected\"))\n\n(defn connect-websocket []\n  (let [ws (js/WebSocket. \"ws://localhost:3000/ws\")]\n    (.addEventListener ws \"open\"\n                      #(do\n                         (reset! ws-connection ws)\n                         (reset! connection-status \"Connected\")))\n    (.addEventListener ws \"close\"\n                      #(do\n                         (reset! ws-connection nil)\n                         (reset! connection-status \"Disconnected\")\n                         ;; Try to reconnect after 2 seconds\n                         (js/setTimeout connect-websocket 2000)))\n    (.addEventListener ws \"message\"\n                      (fn [event]\n                        (let [data (js->clj (js/JSON.parse (.-data event)) :keywordize-keys true)]\n                          (case (:type data)\n                            \"transform-result\" (reset! js-code (:result data))\n                            (js/console.log \"Unknown message type:\" (:type data))))))))\n\n;; Simple example code that kids can understand\n(def simple-code\n  \";; My First Program! \ud83c\udf88\n(defn say-hello [name]\n  (str \\\"Hi, \\\" name \\\"! \ud83d\ude0a\\\"))\n\n(defn add-numbers [a b]\n  (+ a b))  ; Add two numbers together!\")\n\n;; The 'magic' transformed code\n(def magic-code\n  \"// Generated Magic Code \u2728\nfunction sayHello(name) {\n  return \\\"Hi, \\\" + name + \\\"! \ud83d\ude0a\\\";\n}\n\nfunction addNumbers(a, b) {\n  return a + b;  // Add two numbers together!\n}\")\n\n;; Core functionality\n(defn ^:export typed_add\n  \"Add two numbers with type annotations\"\n  [a b]\n  (+ a b))\n\n(defn ^:export typed_greet\n  \"Greet someone with type annotations\"\n  [name]\n  (str \"Hello, \" name \"!\"))\n\n;; UI Components\n(defn demo-component []\n  [:div\n   [:h1 \"CType: ClojureScript to JavaScript Transformer\"]\n   [:h2 \"and JavaScript to ClojureScript Reformer\"]\n   [:div.magic-box\n    [:h3 \"Transform ClojureScript to JavaScript\"]\n    [:div.code-window\n     \"(defn hello [name]\\n  (str \\\"Hello, \\\" name \\\"!\\\"))\"]\n    [:button.magic-button \n     {:on-click #(js/alert \"Transformed to JavaScript!\")}\n     \"Transform! \u2728\"]\n    [:div.code-window\n     \"function hello(name) {\\n  return \\\"Hello, \\\" + name + \\\"!\\\";\\n}\"]]\n   [:div.magic-box\n    [:h3 \"Reform JavaScript to ClojureScript\"]\n    [:div.code-window\n     \"function add(a, b) {\\n  return a + b;\\n}\"]\n    [:button.magic-button\n     {:on-click #(js/alert \"Reformed to ClojureScript!\")}\n     \"Reform! \ud83c\udfaf\"]\n    [:div.code-window\n     \"(defn add [a b]\\n  (+ a b))\"]]])\n\n;; UI Components\n(defn app []\n  [:div.container\n   [:h1 \"CType: ClojureScript to JavaScript Transformer\"]\n   [:div.status-bar\n    [:span (str \"Server Status: \" @connection-status)]]\n   [:div.editors-container\n    [:div.editor-box\n     [:div.editor-title \"ClojureScript\"]\n     [:textarea\n      {:value @cljs-code\n       :on-change #(reset! cljs-code (.. % -target -value))}]]\n    [:div.editor-box\n     [:div.editor-title \"JavaScript\"]\n     [:textarea\n      {:value @js-code\n       :on-change #(reset! js-code (.. % -target -value))}]]]\n   [:div.button-container\n    [:button.transform-button.to-js\n     {:on-click #(when @ws-connection\n                  (.send @ws-connection\n                        (js/JSON.stringify\n                         (clj->js {:type \"transform-to-js\"\n                                 :code @cljs-code}))))}\n     \"Transform to JavaScript \u2728\"]\n    [:button.transform-button.to-cljs\n     {:on-click #(when @ws-connection\n                  (.send @ws-connection\n                        (js/JSON.stringify\n                         (clj->js {:type \"transform-to-cljs\"\n                                 :code @js-code}))))}\n     \"Transform to ClojureScript \ud83c\udfaf\"]]])\n\n;; Initialize application\n(defn init []\n  (connect-websocket)\n  (rdom/render [app]\n               (.getElementById js/document \"app\"))\n  (js/console.log \"CType initialized!\"))\n\n(defn reload []\n  (println \"CType reloaded\")\n  (init))\n\n;; Export functions\n(def ^:export -init init)\n(def ^:export -reload reload) "]}