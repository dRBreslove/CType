{"version":3,"sources":["ctype/transformer.cljs"],"mappings":"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","names":["ctype.transformer/fs","cljs.nodejs/require","ctype.transformer/path","ctype.transformer/read-file","file-path","e12309","fs-module","e","cljs.core.println","ctype.transformer/write-file","content","e12310","ctype.transformer/parse-clojure","e12311","forms","clojure.edn.read_string","ctype.transformer/transform-function-to-js","code","pattern","matches","cljs.core/re-find","vec__12312","cljs.core.nth","_","name","args","body","args-list","clojure.string.split","clojure.string/trim","clojure.string.join","G__12316","ctype.transformer/transform-to-js","ctype.transformer/transform-map-to-js","cljs.core/second","pairs","cljs.core/re-seq","js-pairs","cljs.core.map","p__12317","vec__12318","key","value","clojure.string/replace","ctype.transformer/transform-str-to-js","vec__12321","prefix","var","suffix","ctype.transformer/transform-arithmetic-to-js","vec__12324","op","a","b","clojure.string/includes?","or__5002__auto__","ctype.transformer/transform-function-to-cljs","vec__12327","G__12331","ctype.transformer/transform-to-cljs","ctype.transformer/transform-object-to-cljs","cljs-pairs","pair","vec__12332","ctype.transformer/transform-template-to-cljs","parts","cljs-parts","p__12335","vec__12336","expr","literal","ctype.transformer/transform-arithmetic-to-cljs","vec__12339","ctype.transformer/transform","direction","G__12342","ctype.transformer/transform-to-typescript","ts-code","cljs.core.pr_str","ctype.transformer/transform-code","input-path","output-path","target-format","parsed","transformed","G__12343","cljs.core/Keyword","js/Error","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","ctype.transformer/-main","seq12344","self__5712__auto__","cljs.core/seq","cljs.core/*main-cli-fn*"],"sourcesContent":["(ns ctype.transformer\n  (:require [cljs.nodejs :as nodejs]\n            [clojure.string :as str]\n            [clojure.walk :as walk]\n            [clojure.edn :as edn]))\n\n(def fs (nodejs/require \"fs\"))\n(def path (nodejs/require \"path\"))\n\n;; File operations\n(defn read-file [file-path]\n  (try\n    (let [^js fs-module (nodejs/require \"fs\")]\n      (.readFileSync fs-module file-path \"utf8\"))\n    (catch :default e\n      (println \"Error reading file:\" (.-message e))\n      nil)))\n\n(defn write-file [file-path content]\n  (try\n    (let [^js fs-module (nodejs/require \"fs\")]\n      (.writeFileSync fs-module file-path content \"utf8\")\n      true)\n    (catch :default e\n      (println \"Error writing file:\" (.-message e))\n      false)))\n\n;; Code parsing and transformation\n(defn parse-clojure [content]\n  (try\n    (let [forms (edn/read-string (str \"(\" content \")\"))]\n      {:success true\n       :forms forms})\n    (catch :default e\n      {:success false\n       :error (.-message e)})))\n\n;; Forward declarations for recursive functions\n(declare transform-to-js transform-to-cljs)\n\n(defn- transform-function-to-js [code]\n  (let [pattern #\"\\(defn\\s+(\\w+)\\s+\\[([^\\]]*)\\]\\s+(.*)\\)\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [[_ name args body] matches\n            args-list (str/split (str/trim args) #\"\\s+\")]\n        (str \"function \" name \"(\" (str/join \", \" args-list) \") {\\n  return \" \n             (transform-to-js (str/trim body)) \";\\n}\")))))\n\n(defn- transform-map-to-js [code]\n  (let [pattern #\"\\{([^\\}]*)\\}\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [content (second matches)\n            pairs (re-seq #\":(\\w+)\\s+([^\\s]+)\" content)\n            js-pairs (map (fn [[_ key value]]\n                          (str \"    \" key \": \" (str/replace value #\"\\\"\" \"\")))\n                        pairs)]\n        (str \"return {\\n\" (str/join \",\\n\" js-pairs) \"\\n  };\")))))\n\n(defn- transform-str-to-js [code]\n  (let [pattern #\"\\(str\\s+\\\"([^\\\"]*)\\\"\\s+([^\\s]+)\\s+\\\"([^\\\"]*)\\\"\\)\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [[_ prefix var suffix] matches]\n        (str \"`\" prefix \"${\" var \"}\" suffix \"`\")))))\n\n(defn- transform-arithmetic-to-js [code]\n  (let [pattern #\"\\(([+\\-*/])\\s+([^\\s]+)\\s+([^\\)]+)\\)\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [[_ op a b] matches]\n        (str a \" \" op \" \" b)))))\n\n(defn transform-to-js [code]\n  (if (str/includes? code \"\\n\\n\")\n    (str/join \"\\n\\n\" (map transform-to-js (str/split code #\"\\n\\n\")))\n    (or (transform-function-to-js code)\n        (transform-map-to-js code)\n        (transform-str-to-js code)\n        (transform-arithmetic-to-js code)\n        code)))\n\n(defn- transform-function-to-cljs [code]\n  (let [pattern #\"function\\s+(\\w+)\\(([^)]*)\\)\\s*\\{\\s*return\\s+(.*?);\\s*\\}\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [[_ name args body] matches\n            args-list (str/split (str/trim args) #\",\\s*\")]\n        (str \"(defn \" name \" [\" (str/join \" \" args-list) \"]\\n  \"\n             (transform-to-cljs (str/trim body)) \")\")))))\n\n(defn- transform-object-to-cljs [code]\n  (let [pattern #\"return\\s*\\{\\s*([^}]*)\\s*\\};\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [content (second matches)\n            pairs (str/split content #\",\\s*\")\n            cljs-pairs (map (fn [pair]\n                            (let [[key value] (str/split (str/trim pair) #\":\\s*\")]\n                              (str \":\" (str/trim key) \" \" (str/trim value))))\n                          pairs)]\n        (str \"{\" (str/join \" \" cljs-pairs) \"}\")))))\n\n(defn- transform-template-to-cljs [code]\n  (let [pattern #\"`([^`]*)`\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [content (second matches)\n            parts (re-seq #\"\\$\\{([^}]+)\\}|([^${}]+)\" content)\n            cljs-parts (map (fn [[_ expr literal]]\n                            (if expr\n                              expr\n                              (str \"\\\"\" literal \"\\\"\")))\n                          parts)]\n        (str \"(str \" (str/join \" \" cljs-parts) \")\")))))\n\n(defn- transform-arithmetic-to-cljs [code]\n  (let [pattern #\"([^\\s]+)\\s+([+\\-*/])\\s+([^\\s]+)\"\n        matches (re-find pattern code)]\n    (when matches\n      (let [[_ a op b] matches]\n        (str \"(\" op \" \" a \" \" b \")\")))))\n\n(defn transform-to-cljs [code]\n  (if (str/includes? code \"\\n\\n\")\n    (str/join \"\\n\\n\" (map transform-to-cljs (str/split code #\"\\n\\n\")))\n    (or (transform-function-to-cljs code)\n        (transform-object-to-cljs code)\n        (transform-template-to-cljs code)\n        (transform-arithmetic-to-cljs code)\n        code)))\n\n(defn transform\n  \"Transform code between ClojureScript and JavaScript\"\n  [code direction]\n  (case direction\n    \"to-js\" (transform-to-js code)\n    \"to-cljs\" (transform-to-cljs code)\n    code))\n\n(defn transform-to-typescript [forms]\n  (let [ts-code (str/replace (pr-str forms) #\"\\(|\\)\" \"\")\n        ts-code (str/replace ts-code #\"defn\" \"function\")\n        ts-code (str/replace ts-code #\"def\" \"const\")]\n    ts-code))\n\n;; Main transformation function\n(defn transform-code [input-path output-path target-format]\n  (let [content (read-file input-path)\n        parsed (parse-clojure content)]\n    (if (:success parsed)\n      (let [transformed (case target-format\n                         :js (transform-to-js (:forms parsed))\n                         :ts (transform-to-typescript (:forms parsed))\n                         (throw (js/Error. \"Unsupported target format\")))]\n        (write-file output-path transformed))\n      (println \"Error parsing code:\" (:error parsed)))))\n\n;; CLI entry point\n(defn ^:export -main [& args]\n  (println \"CType Transformer initialized!\"))\n\n(set! *main-cli-fn* -main)\n\n(def ^:export transform transform) "]}