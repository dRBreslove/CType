{"version":3,"sources":["ctype/core.cljs"],"mappings":";AAMA,yBAAA,zBAAKA;AASL,wBAAA,xBAAKC;AAWL,4BAAA,5BAAMC;AAAN,AACE,IAAMC,eAAa,gDAAA,hDAACC;IACdC,gBAAc,gDAAA,hDAACD;AADrB,AAEE;AAAA,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,yCAAA,mFAAA,wEAAA,mFAAA,iDAAA,mFAAA,iEAAA,uBAAA,4CAAA,mFAAA,yGAAA,mFAAA,mFAAA,2CAAA,6DAAA,7SAKsBJ;AALtB,AAOiB,AACC,mCAAA,nCAACO,sBAAOJ;;AACR,OAACK,WACA;AAAA,AAAO,OAACD,sBAAOJ,aAAaF;GAD7B;WATlB,4BAAA,mFAAA,0EAAA,AAAAK,8CAAA,mFAAA,wEAAA,mFAAA,iDAAA,mFAAA,iEAAA,uBAAA,gCAAA,mFAAA,wGAAA,mFAAA,mFAAA,2CAAA,6DAAA,j9BAauBH,qqBAGDF;AAhBtB,AAkBiB,AACC,oCAAA,pCAACM,sBAAOF;;AACR,OAACG,WACA;AAAA,AAAO,OAACD,sBAAOF,cAAcL;GAD9B;WApBlB,uCAAA,mFAAA,0EAAA,AAAAM,gBAwBuBD;;;AAG3B,kBAAA,lBAAMI;AAAN,AACE,yGAAA,zGAACC;;AACD,wDAAA,jDAACC,oIAAaT,kCACD,wBAAA,xBAAiBU;;AAGhC,oBAAA,pBAAMC;AAAN,AACE,yGAAA,zGAACH;;AACD,OAACD;;AAGH;;;uBAAA,vBAAMK,sDAEHC,EAAEC;AAFL,AAGE,QAAGD,IAAEC;;AAEP;;;yBAAA,zBAAMC,0DAEHC;AAFH,AAGE,QAAA,4DAAA,NAAeA;;AAGjB,uBAAA,vBAAeC,sDAAWJ,EAAEC;AAA5B,AAA+B,OAACF,qBAAUC,EAAEC;;;AAC5C,yBAAA,zBAAeI,0DAAaF;AAA5B,AAAkC,OAACD,uBAAYC;;;AAC/C,kBAAA,lBAAeT;AAAf,AAAuB,QAACA,gDAAAA,kDAAAA;;;AACxB,oBAAA,pBAAeI;AAAf,AAAyB,QAACA,kDAAAA,oDAAAA","names":["ctype.core/simple-code","ctype.core/magic-code","ctype.core/demo-component","magic-output","reagent.core.atom","simple-output","cljs.core/deref","cljs.core/reset!","js/setTimeout","ctype.core/init","cljs.core.println","reagent.dom.render","js/document","ctype.core/reload","ctype.core/typed-add","a","b","ctype.core/typed-greet","name","ctype.core/typed_add","ctype.core/typed_greet"],"sourcesContent":["(ns ctype.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [cljs.nodejs :as nodejs]))\n\n;; Simple example code that kids can understand\n(def simple-code\n  \";; My First Program! \ud83c\udf88\n(defn say-hello [name]\n  (str \\\"Hi, \\\" name \\\"! \ud83d\ude0a\\\"))\n\n(defn add-numbers [a b]\n  (+ a b))  ; Add two numbers together!\")\n\n;; The 'magic' transformed code\n(def magic-code\n  \"// Generated Magic Code \u2728\nfunction sayHello(name) {\n  return \\\"Hi, \\\" + name + \\\"! \ud83d\ude0a\\\";\n}\n\nfunction addNumbers(a, b) {\n  return a + b;  // Add two numbers together!\n}\")\n\n;; The main component that shows our magic transformation\n(defn demo-component []\n  (let [magic-output (r/atom \"\")\n        simple-output (r/atom \"\")]\n    (fn []\n      [:div\n       [:h1 \"\u2728 Code Transformer \u2728\"]\n       [:div.magic-box\n        [:h2 [:span.emoji \"\ud83c\udf1f\"] \"Turn Simple Code into Magic Code!\"]\n        [:div.code-window simple-code]\n        [:button.magic-button \n         {:on-click #(do\n                      (reset! magic-output \"\ud83c\udfa9 Transforming...\")\n                      (js/setTimeout\n                       (fn [] (reset! magic-output magic-code))\n                       1000))}\n         \"Transform! \u2728\"]\n        [:div.code-window @magic-output]]\n       [:div.magic-box\n        [:h2 [:span.emoji \"\ud83d\udd2e\"] \"Turn Magic Code Back!\"]\n        [:div.code-window magic-code]\n        [:button.magic-button\n         {:on-click #(do\n                      (reset! simple-output \"\ud83c\udfaf Transforming back...\")\n                      (js/setTimeout\n                       (fn [] (reset! simple-output simple-code))\n                       1000))}\n         \"Transform Back! \ud83c\udfaf\"]\n        [:div.code-window @simple-output]]])))\n\n;; Start the app\n(defn init []\n  (println \"CType initialized\")\n  (rdom/render [demo-component]\n               (.getElementById js/document \"app\")))\n\n;; Reload with a fun message\n(defn reload []\n  (println \"CType reloaded\")\n  (init))\n\n;; Core functionality\n(defn typed-add\n  \"Add two numbers with type annotations\"\n  [a b]\n  (+ a b))\n\n(defn typed-greet\n  \"Greet someone with type annotations\"\n  [name]\n  (str \"Hello, \" name \"!\"))\n\n;; Export functions for JavaScript/TypeScript\n(defn ^:export typed_add [a b] (typed-add a b))\n(defn ^:export typed_greet [name] (typed-greet name))\n(defn ^:export init [] (init))\n(defn ^:export reload [] (reload)) "]}