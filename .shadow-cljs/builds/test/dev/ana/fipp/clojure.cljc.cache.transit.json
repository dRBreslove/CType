["^ ","~:output",["^ ","~:js","goog.provide('fipp.clojure');\nfipp.clojure.block = (function fipp$clojure$block(nodes){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),(2),cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"line\",\"line\",212345235),nodes)], null);\n});\nfipp.clojure.list_group = (function fipp$clojure$list_group(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___12003 = arguments.length;\nvar i__5727__auto___12004 = (0);\nwhile(true){\nif((i__5727__auto___12004 < len__5726__auto___12003)){\nargs__5732__auto__.push((arguments[i__5727__auto___12004]));\n\nvar G__12005 = (i__5727__auto___12004 + (1));\ni__5727__auto___12004 = G__12005;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic = (function (nodes){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"group\",\"group\",582596132),\"(\",nodes,\")\"], null);\n}));\n\n(fipp.clojure.list_group.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(fipp.clojure.list_group.cljs$lang$applyTo = (function (seq11783){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11783));\n}));\n\nfipp.clojure.maybe_a = (function fipp$clojure$maybe_a(pred,xs){\nvar x = cljs.core.first(xs);\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(x) : pred.call(null, x)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,cljs.core.rest(xs)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,xs], null);\n}\n});\nfipp.clojure.pretty_cond_clause = (function fipp$clojure$pretty_cond_clause(p,p__11788){\nvar vec__11792 = p__11788;\nvar test = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11792,(0),null);\nvar result = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11792,(1),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"group\",\"group\",582596132),fipp.visit.visit(p,test),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),(2),fipp.visit.visit(p,result)], null)], null);\n});\nfipp.clojure.pretty_case = (function fipp$clojure$pretty_case(p,p__11801){\nvar vec__11802 = p__11801;\nvar seq__11803 = cljs.core.seq(vec__11802);\nvar first__11804 = cljs.core.first(seq__11803);\nvar seq__11803__$1 = cljs.core.next(seq__11803);\nvar head = first__11804;\nvar first__11804__$1 = cljs.core.first(seq__11803__$1);\nvar seq__11803__$2 = cljs.core.next(seq__11803__$1);\nvar expr = first__11804__$1;\nvar more = seq__11803__$2;\nvar clauses = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),more);\nvar default$ = ((cljs.core.odd_QMARK_(cljs.core.count(more)))?cljs.core.last(more):null);\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",fipp.visit.visit(p,expr),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11796_SHARP_){\nreturn fipp.clojure.pretty_cond_clause(p,p1__11796_SHARP_);\n}),clauses),(cljs.core.truth_(default$)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,default$)], null):null)))], 0));\n});\nfipp.clojure.pretty_cond = (function fipp$clojure$pretty_cond(p,p__11806){\nvar vec__11807 = p__11806;\nvar seq__11808 = cljs.core.seq(vec__11807);\nvar first__11809 = cljs.core.first(seq__11808);\nvar seq__11808__$1 = cljs.core.next(seq__11808);\nvar head = first__11809;\nvar more = seq__11808__$1;\nvar clauses = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),more);\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11805_SHARP_){\nreturn fipp.clojure.pretty_cond_clause(p,p1__11805_SHARP_);\n}),clauses))], 0));\n});\nfipp.clojure.pretty_condp = (function fipp$clojure$pretty_condp(p,p__11812){\nvar vec__11814 = p__11812;\nvar seq__11815 = cljs.core.seq(vec__11814);\nvar first__11816 = cljs.core.first(seq__11815);\nvar seq__11815__$1 = cljs.core.next(seq__11815);\nvar head = first__11816;\nvar first__11816__$1 = cljs.core.first(seq__11815__$1);\nvar seq__11815__$2 = cljs.core.next(seq__11815__$1);\nvar pred = first__11816__$1;\nvar first__11816__$2 = cljs.core.first(seq__11815__$2);\nvar seq__11815__$3 = cljs.core.next(seq__11815__$2);\nvar expr = first__11816__$2;\nvar more = seq__11815__$3;\nvar clauses = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),more);\nvar default$ = ((cljs.core.odd_QMARK_(cljs.core.count(more)))?cljs.core.last(more):null);\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",fipp.visit.visit(p,pred),\" \",fipp.visit.visit(p,expr),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11811_SHARP_){\nreturn fipp.clojure.pretty_cond_clause(p,p1__11811_SHARP_);\n}),clauses),(cljs.core.truth_(default$)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,default$)], null):null)))], 0));\n});\nfipp.clojure.pretty_arrow = (function fipp$clojure$pretty_arrow(p,p__11818){\nvar vec__11819 = p__11818;\nvar seq__11820 = cljs.core.seq(vec__11819);\nvar first__11821 = cljs.core.first(seq__11820);\nvar seq__11820__$1 = cljs.core.next(seq__11820);\nvar head = first__11821;\nvar stmts = seq__11820__$1;\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"align\",\"align\",1964212802),cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"line\",\"line\",212345235),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11817_SHARP_){\nreturn fipp.visit.visit(p,p1__11817_SHARP_);\n}),stmts))], null)], 0));\n});\nfipp.clojure.pretty_if = (function fipp$clojure$pretty_if(p,p__11827){\nvar vec__11828 = p__11827;\nvar seq__11829 = cljs.core.seq(vec__11828);\nvar first__11830 = cljs.core.first(seq__11829);\nvar seq__11829__$1 = cljs.core.next(seq__11829);\nvar head = first__11830;\nvar first__11830__$1 = cljs.core.first(seq__11829__$1);\nvar seq__11829__$2 = cljs.core.next(seq__11829__$1);\nvar test = first__11830__$1;\nvar more = seq__11829__$2;\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",fipp.visit.visit(p,test),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11824_SHARP_){\nreturn fipp.visit.visit(p,p1__11824_SHARP_);\n}),more))], 0));\n});\nfipp.clojure.pretty_method = (function fipp$clojure$pretty_method(p,p__11832){\nvar vec__11833 = p__11832;\nvar seq__11834 = cljs.core.seq(vec__11833);\nvar first__11835 = cljs.core.first(seq__11834);\nvar seq__11834__$1 = cljs.core.next(seq__11834);\nvar params = first__11835;\nvar body = seq__11834__$1;\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,params),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11831_SHARP_){\nreturn fipp.visit.visit(p,p1__11831_SHARP_);\n}),body))], 0));\n});\nfipp.clojure.pretty_defn = (function fipp$clojure$pretty_defn(p,p__11840){\nvar vec__11841 = p__11840;\nvar seq__11842 = cljs.core.seq(vec__11841);\nvar first__11843 = cljs.core.first(seq__11842);\nvar seq__11842__$1 = cljs.core.next(seq__11842);\nvar head = first__11843;\nvar first__11843__$1 = cljs.core.first(seq__11842__$1);\nvar seq__11842__$2 = cljs.core.next(seq__11842__$1);\nvar fn_name = first__11843__$1;\nvar more = seq__11842__$2;\nvar vec__11844 = fipp.clojure.maybe_a(cljs.core.string_QMARK_,more);\nvar docstring = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11844,(0),null);\nvar more__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11844,(1),null);\nvar vec__11847 = fipp.clojure.maybe_a(cljs.core.map_QMARK_,more__$1);\nvar attr_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11847,(0),null);\nvar more__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11847,(1),null);\nvar vec__11850 = fipp.clojure.maybe_a(cljs.core.vector_QMARK_,more__$2);\nvar params = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11850,(0),null);\nvar body = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11850,(1),null);\nvar params_on_first_line_QMARK_ = (function (){var and__5000__auto__ = params;\nif(cljs.core.truth_(and__5000__auto__)){\nreturn (((docstring == null)) && ((attr_map == null)));\n} else {\nreturn and__5000__auto__;\n}\n})();\nvar params_after_attr_map_QMARK_ = (function (){var and__5000__auto__ = params;\nif(cljs.core.truth_(and__5000__auto__)){\nreturn cljs.core.not(params_on_first_line_QMARK_);\n} else {\nreturn and__5000__auto__;\n}\n})();\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,head),\" \",fipp.visit.visit(p,fn_name)], null),(cljs.core.truth_(params_on_first_line_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",fipp.visit.visit(p,params)], null):null)),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((cljs.core.truth_(docstring)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,docstring)], null):null),(cljs.core.truth_(attr_map)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,attr_map)], null):null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(params_after_attr_map_QMARK_)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,params)], null):null),(cljs.core.truth_(body)?cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11836_SHARP_){\nreturn fipp.visit.visit(p,p1__11836_SHARP_);\n}),body):cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11837_SHARP_){\nreturn fipp.clojure.pretty_method(p,p1__11837_SHARP_);\n}),more__$2))], 0)))], 0));\n});\nfipp.clojure.pretty_fn = (function fipp$clojure$pretty_fn(p,p__11856){\nvar vec__11857 = p__11856;\nvar seq__11858 = cljs.core.seq(vec__11857);\nvar first__11859 = cljs.core.first(seq__11858);\nvar seq__11858__$1 = cljs.core.next(seq__11858);\nvar head = first__11859;\nvar more = seq__11858__$1;\nvar vec__11860 = fipp.clojure.maybe_a(cljs.core.symbol_QMARK_,more);\nvar fn_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11860,(0),null);\nvar more__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11860,(1),null);\nvar vec__11863 = fipp.clojure.maybe_a(cljs.core.vector_QMARK_,more__$1);\nvar params = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11863,(0),null);\nvar body = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11863,(1),null);\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,head)], null),(cljs.core.truth_(fn_name)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",fipp.visit.visit(p,fn_name)], null):null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(params)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",fipp.visit.visit(p,params)], null):null)], 0)),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block((cljs.core.truth_(body)?cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11854_SHARP_){\nreturn fipp.visit.visit(p,p1__11854_SHARP_);\n}),body):cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11855_SHARP_){\nreturn fipp.clojure.pretty_method(p,p1__11855_SHARP_);\n}),more__$1)))], 0));\n});\nfipp.clojure.pretty_fn_STAR_ = (function fipp$clojure$pretty_fn_STAR_(p,p__11871){\nvar vec__11872 = p__11871;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11872,(0),null);\nvar params = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11872,(1),null);\nvar body = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11872,(2),null);\nvar form = vec__11872;\nif(((cljs.core.vector_QMARK_(params)) && (cljs.core.seq_QMARK_(body)))){\nvar vec__11875 = cljs.core.split_with((function (p1__11867_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(p1__11867_SHARP_,new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null));\n}),params);\nvar inits = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11875,(0),null);\nvar rests = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11875,(1),null);\nvar params_STAR_ = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(inits),(1)))?cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.first(inits),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)]):cljs.core.zipmap(inits,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11869_SHARP_){\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([\"%\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((p1__11869_SHARP_ + (1)))].join(''));\n}),cljs.core.range.cljs$core$IFn$_invoke$arity$0()))),((cljs.core.seq(rests))?cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.second(rests),new cljs.core.Symbol(null,\"%&\",\"%&\",-728707069,null)]):null)], 0));\nvar body_STAR_ = clojure.walk.prewalk_replace(params_STAR_,body);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"group\",\"group\",582596132),\"#(\",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(2),cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"line\",\"line\",212345235),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11870_SHARP_){\nreturn fipp.visit.visit(p,p1__11870_SHARP_);\n}),body_STAR_))], null),\")\"], null);\n} else {\nreturn fipp.clojure.pretty_fn(p,form);\n}\n});\nfipp.clojure.pretty_libspec = (function fipp$clojure$pretty_libspec(p,p__11882){\nvar vec__11883 = p__11882;\nvar seq__11884 = cljs.core.seq(vec__11883);\nvar first__11885 = cljs.core.first(seq__11884);\nvar seq__11884__$1 = cljs.core.next(seq__11884);\nvar head = first__11885;\nvar clauses = seq__11884__$1;\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"align\",\"align\",1964212802),cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"line\",\"line\",212345235),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11881_SHARP_){\nreturn fipp.visit.visit(p,p1__11881_SHARP_);\n}),clauses))], null)], 0));\n});\nfipp.clojure.pretty_ns = (function fipp$clojure$pretty_ns(p,p__11924){\nvar vec__11925 = p__11924;\nvar seq__11926 = cljs.core.seq(vec__11925);\nvar first__11927 = cljs.core.first(seq__11926);\nvar seq__11926__$1 = cljs.core.next(seq__11926);\nvar head = first__11927;\nvar first__11927__$1 = cljs.core.first(seq__11926__$1);\nvar seq__11926__$2 = cljs.core.next(seq__11926__$1);\nvar ns_sym = first__11927__$1;\nvar more = seq__11926__$2;\nvar vec__11928 = fipp.clojure.maybe_a(cljs.core.string_QMARK_,more);\nvar docstring = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11928,(0),null);\nvar more__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11928,(1),null);\nvar vec__11931 = fipp.clojure.maybe_a(cljs.core.map_QMARK_,more__$1);\nvar attr_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11931,(0),null);\nvar specs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11931,(1),null);\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",fipp.visit.visit(p,ns_sym),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((cljs.core.truth_(docstring)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,docstring)], null):null),(cljs.core.truth_(attr_map)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fipp.visit.visit(p,attr_map)], null):null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11895_SHARP_){\nreturn fipp.clojure.pretty_libspec(p,p1__11895_SHARP_);\n}),specs)], 0)))], 0));\n});\nfipp.clojure.pretty_quote = (function fipp$clojure$pretty_quote(p,p__11941){\nvar vec__11942 = p__11941;\nvar macro = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11942,(0),null);\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11942,(1),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"span\",\"span\",1394872991),(function (){var G__11945 = cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(macro));\nvar G__11945__$1 = (((G__11945 instanceof cljs.core.Keyword))?G__11945.fqn:null);\nswitch (G__11945__$1) {\ncase \"deref\":\nreturn \"@\";\n\nbreak;\ncase \"quote\":\nreturn \"'\";\n\nbreak;\ncase \"unquote\":\nreturn \"~\";\n\nbreak;\ncase \"var\":\nreturn \"#'\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__11945__$1)].join('')));\n\n}\n})(),fipp.visit.visit(p,arg)], null);\n});\nfipp.clojure.pretty_bindings = (function fipp$clojure$pretty_bindings(p,bvec){\nvar kvps = (function (){var iter__5480__auto__ = (function fipp$clojure$pretty_bindings_$_iter__11947(s__11948){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__11948__$1 = s__11948;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__11948__$1);\nif(temp__5804__auto__){\nvar s__11948__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__11948__$2)){\nvar c__5478__auto__ = cljs.core.chunk_first(s__11948__$2);\nvar size__5479__auto__ = cljs.core.count(c__5478__auto__);\nvar b__11950 = cljs.core.chunk_buffer(size__5479__auto__);\nif((function (){var i__11949 = (0);\nwhile(true){\nif((i__11949 < size__5479__auto__)){\nvar vec__11951 = cljs.core._nth(c__5478__auto__,i__11949);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11951,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11951,(1),null);\ncljs.core.chunk_append(b__11950,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"span\",\"span\",1394872991),fipp.visit.visit(p,k),\" \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"align\",\"align\",1964212802),fipp.visit.visit(p,v)], null)], null));\n\nvar G__12049 = (i__11949 + (1));\ni__11949 = G__12049;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__11950),fipp$clojure$pretty_bindings_$_iter__11947(cljs.core.chunk_rest(s__11948__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__11950),null);\n}\n} else {\nvar vec__11954 = cljs.core.first(s__11948__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11954,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11954,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"span\",\"span\",1394872991),fipp.visit.visit(p,k),\" \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"align\",\"align\",1964212802),fipp.visit.visit(p,v)], null)], null),fipp$clojure$pretty_bindings_$_iter__11947(cljs.core.rest(s__11948__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5480__auto__(cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),bvec));\n})();\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"group\",\"group\",582596132),\"[\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"align\",\"align\",1964212802),cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"line\",\"line\",212345235),\", \"], null),kvps)], null),\"]\"], null);\n});\nfipp.clojure.pretty_let = (function fipp$clojure$pretty_let(p,p__11959){\nvar vec__11960 = p__11959;\nvar seq__11961 = cljs.core.seq(vec__11960);\nvar first__11962 = cljs.core.first(seq__11961);\nvar seq__11961__$1 = cljs.core.next(seq__11961);\nvar head = first__11962;\nvar first__11962__$1 = cljs.core.first(seq__11961__$1);\nvar seq__11961__$2 = cljs.core.next(seq__11961__$1);\nvar bvec = first__11962__$1;\nvar body = seq__11961__$2;\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",fipp.clojure.pretty_bindings(p,bvec),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.block(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11958_SHARP_){\nreturn fipp.visit.visit(p,p1__11958_SHARP_);\n}),body))], 0));\n});\nfipp.clojure.pretty_impls = (function fipp$clojure$pretty_impls(p,opts_PLUS_specs){\nreturn fipp.clojure.block(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__11963_SHARP_){\nreturn fipp.visit.visit(p,p1__11963_SHARP_);\n}),opts_PLUS_specs));\n});\nfipp.clojure.pretty_type = (function fipp$clojure$pretty_type(p,p__11964){\nvar vec__11965 = p__11964;\nvar seq__11966 = cljs.core.seq(vec__11965);\nvar first__11967 = cljs.core.first(seq__11966);\nvar seq__11966__$1 = cljs.core.next(seq__11966);\nvar head = first__11967;\nvar first__11967__$1 = cljs.core.first(seq__11966__$1);\nvar seq__11966__$2 = cljs.core.next(seq__11966__$1);\nvar fields = first__11967__$1;\nvar opts_PLUS_specs = seq__11966__$2;\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),\" \",fipp.visit.visit(p,fields),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.pretty_impls(p,opts_PLUS_specs)], 0));\n});\nfipp.clojure.pretty_reify = (function fipp$clojure$pretty_reify(p,p__11968){\nvar vec__11972 = p__11968;\nvar seq__11973 = cljs.core.seq(vec__11972);\nvar first__11974 = cljs.core.first(seq__11973);\nvar seq__11973__$1 = cljs.core.next(seq__11973);\nvar head = first__11974;\nvar opts_PLUS_specs = seq__11973__$1;\nreturn fipp.clojure.list_group.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.visit.visit(p,head),new cljs.core.Keyword(null,\"line\",\"line\",212345235),fipp.clojure.pretty_impls(p,opts_PLUS_specs)], 0));\n});\nfipp.clojure.build_symbol_map = (function fipp$clojure$build_symbol_map(dispatch){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5480__auto__ = (function fipp$clojure$build_symbol_map_$_iter__11976(s__11977){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__11977__$1 = s__11977;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__11977__$1);\nif(temp__5804__auto__){\nvar xs__6360__auto__ = temp__5804__auto__;\nvar vec__11984 = cljs.core.first(xs__6360__auto__);\nvar pretty_fn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11984,(0),null);\nvar syms = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11984,(1),null);\nvar iterys__5476__auto__ = ((function (s__11977__$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__){\nreturn (function fipp$clojure$build_symbol_map_$_iter__11976_$_iter__11978(s__11979){\nreturn (new cljs.core.LazySeq(null,((function (s__11977__$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__){\nreturn (function (){\nvar s__11979__$1 = s__11979;\nwhile(true){\nvar temp__5804__auto____$1 = cljs.core.seq(s__11979__$1);\nif(temp__5804__auto____$1){\nvar xs__6360__auto____$1 = temp__5804__auto____$1;\nvar sym = cljs.core.first(xs__6360__auto____$1);\nvar iterys__5476__auto__ = ((function (s__11979__$1,s__11977__$1,sym,xs__6360__auto____$1,temp__5804__auto____$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__){\nreturn (function fipp$clojure$build_symbol_map_$_iter__11976_$_iter__11978_$_iter__11980(s__11981){\nreturn (new cljs.core.LazySeq(null,((function (s__11979__$1,s__11977__$1,sym,xs__6360__auto____$1,temp__5804__auto____$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__){\nreturn (function (){\nvar s__11981__$1 = s__11981;\nwhile(true){\nvar temp__5804__auto____$2 = cljs.core.seq(s__11981__$1);\nif(temp__5804__auto____$2){\nvar s__11981__$2 = temp__5804__auto____$2;\nif(cljs.core.chunked_seq_QMARK_(s__11981__$2)){\nvar c__5478__auto__ = cljs.core.chunk_first(s__11981__$2);\nvar size__5479__auto__ = cljs.core.count(c__5478__auto__);\nvar b__11983 = cljs.core.chunk_buffer(size__5479__auto__);\nif((function (){var i__11982 = (0);\nwhile(true){\nif((i__11982 < size__5479__auto__)){\nvar sym__$1 = cljs.core._nth(c__5478__auto__,i__11982);\ncljs.core.chunk_append(b__11983,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym__$1,pretty_fn], null));\n\nvar G__12081 = (i__11982 + (1));\ni__11982 = G__12081;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__11983),fipp$clojure$build_symbol_map_$_iter__11976_$_iter__11978_$_iter__11980(cljs.core.chunk_rest(s__11981__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__11983),null);\n}\n} else {\nvar sym__$1 = cljs.core.first(s__11981__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym__$1,pretty_fn], null),fipp$clojure$build_symbol_map_$_iter__11976_$_iter__11978_$_iter__11980(cljs.core.rest(s__11981__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__11979__$1,s__11977__$1,sym,xs__6360__auto____$1,temp__5804__auto____$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__))\n,null,null));\n});})(s__11979__$1,s__11977__$1,sym,xs__6360__auto____$1,temp__5804__auto____$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__))\n;\nvar fs__5477__auto__ = cljs.core.seq(iterys__5476__auto__(cljs.core.cons(sym,((cljs.core.special_symbol_QMARK_(sym))?null:new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"clojure.core\",cljs.core.name(sym)),cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"cljs.core\",cljs.core.name(sym))], null)))));\nif(fs__5477__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__5477__auto__,fipp$clojure$build_symbol_map_$_iter__11976_$_iter__11978(cljs.core.rest(s__11979__$1)));\n} else {\nvar G__12084 = cljs.core.rest(s__11979__$1);\ns__11979__$1 = G__12084;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__11977__$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__))\n,null,null));\n});})(s__11977__$1,vec__11984,pretty_fn,syms,xs__6360__auto__,temp__5804__auto__))\n;\nvar fs__5477__auto__ = cljs.core.seq(iterys__5476__auto__(syms));\nif(fs__5477__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__5477__auto__,fipp$clojure$build_symbol_map_$_iter__11976(cljs.core.rest(s__11977__$1)));\n} else {\nvar G__12091 = cljs.core.rest(s__11977__$1);\ns__11977__$1 = G__12091;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5480__auto__(dispatch);\n})());\n});\nfipp.clojure.default_symbols = fipp.clojure.build_symbol_map(cljs.core.PersistentHashMap.fromArrays([fipp.clojure.pretty_fn_STAR_,fipp.clojure.pretty_condp,fipp.clojure.pretty_quote,fipp.clojure.pretty_cond,fipp.clojure.pretty_fn,fipp.clojure.pretty_arrow,fipp.clojure.pretty_reify,fipp.clojure.pretty_let,fipp.clojure.pretty_type,fipp.clojure.pretty_if,fipp.clojure.pretty_defn,fipp.clojure.pretty_ns,fipp.clojure.pretty_case],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"condp\",\"condp\",1054325175,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"deref\",\"deref\",1494944732,null),new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"unquote\",\"unquote\",-1004694737,null),new cljs.core.Symbol(null,\"var\",\"var\",870848730,null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"cond\",\"cond\",1606708055,null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"fn\",\"fn\",465265323,null)], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\".\",\".\",1975675962,null),new cljs.core.Symbol(null,\"..\",\"..\",-300507420,null),new cljs.core.Symbol(null,\"->\",\"->\",-2139605430,null),new cljs.core.Symbol(null,\"->>\",\"->>\",-1874332161,null),new cljs.core.Symbol(null,\"and\",\"and\",668631710,null),new cljs.core.Symbol(null,\"doto\",\"doto\",1252536074,null),new cljs.core.Symbol(null,\"or\",\"or\",1876275696,null),new cljs.core.Symbol(null,\"some->\",\"some->\",-1011172200,null),new cljs.core.Symbol(null,\"some->>\",\"some->>\",-1499987794,null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"reify\",\"reify\",1885539699,null)], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"binding\",\"binding\",-2114503176,null),new cljs.core.Symbol(null,\"doseq\",\"doseq\",221164135,null),new cljs.core.Symbol(null,\"dotimes\",\"dotimes\",-818708397,null),new cljs.core.Symbol(null,\"for\",\"for\",316745208,null),new cljs.core.Symbol(null,\"if-let\",\"if-let\",1803593690,null),new cljs.core.Symbol(null,\"if-some\",\"if-some\",1960677609,null),new cljs.core.Symbol(null,\"let\",\"let\",358118826,null),new cljs.core.Symbol(null,\"let*\",\"let*\",1920721458,null),new cljs.core.Symbol(null,\"loop\",\"loop\",1244978678,null),new cljs.core.Symbol(null,\"loop*\",\"loop*\",615029416,null),new cljs.core.Symbol(null,\"when-first\",\"when-first\",821699168,null),new cljs.core.Symbol(null,\"when-let\",\"when-let\",-1383043480,null),new cljs.core.Symbol(null,\"when-some\",\"when-some\",1700415903,null),new cljs.core.Symbol(null,\"with-local-vars\",\"with-local-vars\",837642072,null),new cljs.core.Symbol(null,\"with-open\",\"with-open\",172119667,null),new cljs.core.Symbol(null,\"with-redefs\",\"with-redefs\",-1143728263,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"deftype\",\"deftype\",1980826088,null),new cljs.core.Symbol(null,\"defrecord\",\"defrecord\",273038109,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),new cljs.core.Symbol(null,\"defonce\",\"defonce\",-1681484013,null),new cljs.core.Symbol(null,\"if\",\"if\",1181717262,null),new cljs.core.Symbol(null,\"if-not\",\"if-not\",-265415609,null),new cljs.core.Symbol(null,\"when\",\"when\",1064114221,null),new cljs.core.Symbol(null,\"when-not\",\"when-not\",-1223136340,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"defmacro\",\"defmacro\",2054157304,null),new cljs.core.Symbol(null,\"defmulti\",\"defmulti\",1936112154,null),new cljs.core.Symbol(null,\"defn\",\"defn\",-126010802,null),new cljs.core.Symbol(null,\"defn-\",\"defn-\",1097765044,null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"ns\",\"ns\",2082130287,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null),new cljs.core.Symbol(null,\"cond->\",\"cond->\",561741875,null),new cljs.core.Symbol(null,\"cond->>\",\"cond->>\",348844960,null)], null)]));\nfipp.clojure.pprint = (function fipp$clojure$pprint(var_args){\nvar G__12001 = arguments.length;\nswitch (G__12001) {\ncase 1:\nreturn fipp.clojure.pprint.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn fipp.clojure.pprint.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(fipp.clojure.pprint.cljs$core$IFn$_invoke$arity$1 = (function (x){\nreturn fipp.clojure.pprint.cljs$core$IFn$_invoke$arity$2(x,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(fipp.clojure.pprint.cljs$core$IFn$_invoke$arity$2 = (function (x,options){\nreturn fipp.edn.pprint.cljs$core$IFn$_invoke$arity$2(x,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"symbols\",\"symbols\",1211743),fipp.clojure.default_symbols], null),options], 0)));\n}));\n\n(fipp.clojure.pprint.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Provides a pretty document serializer and pprint fn for Clojure code.\n  See fipp.edn for pretty printing Clojure/EDN data structures","~:file","fipp/clojure.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$fipp.clojure","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.walk","^M","~$walk","^M","~$fipp.visit","^O","~$v","^O","~$fipp.edn","^P","~$edn","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^E",["~:require"]],"~:uses",["^ ","~$visit","^O"],"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^G","Provides a pretty document serializer and pprint fn for Clojure code.\n  See fipp.edn for pretty printing Clojure/EDN data structures",["^Z",["^U",["^M","~:as","^N"],["^O","^10","~$v","~:refer",["^W"]],["^P","^10","^Q"]]]]],"~:flags",["^ ","^U",["^E",[]]],"~:js-deps",[],"~:deps",["^S","^R","^M","^O","^P"]],"^J","^G","~:resource-id",["~:shadow.build.classpath/resource","fipp/clojure.cljc"],"~:compiled-at",1744168638511,"^H",["^ ","^M","^M","^N","^M","^O","^O","~$v","^O","^P","^P","^Q","^P","^R","^R","^S","^S"],"~:resource-name","fipp/clojure.cljc","~:warnings",[],"~:source","(ns fipp.clojure\n  \"Provides a pretty document serializer and pprint fn for Clojure code.\n  See fipp.edn for pretty printing Clojure/EDN data structures\"\n  (:require [clojure.walk :as walk]\n            [fipp.visit :as v :refer [visit]]\n            [fipp.edn :as edn]))\n\n\n;;; Helper functions\n\n(defn block [nodes]\n  [:nest 2 (interpose :line nodes)])\n\n(defn list-group [& nodes]\n  [:group \"(\" nodes \")\"])\n\n(defn maybe-a [pred xs]\n  (let [x (first xs)] (if (pred x) [x (rest xs)] [nil xs])))\n\n\n;;; Format case, cond, condp\n\n(defn pretty-cond-clause [p [test result]]\n  [:group (visit p test) :line [:nest 2 (visit p result)]])\n\n(defn pretty-case [p [head expr & more]]\n  (let [clauses (partition 2 more)\n        default (when (odd? (count more)) (last more))]\n    (list-group\n      (visit p head) \" \" (visit p expr) :line\n      (block (concat (map #(pretty-cond-clause p %) clauses)\n                     (when default [(visit p default)]))))))\n\n(defn pretty-cond [p [head & more]]\n  (let [clauses (partition 2 more)]\n    (list-group\n      (visit p head) :line\n      (block (map #(pretty-cond-clause p %) clauses)))))\n\n;;TODO this will get tripped up by ternary (test :>> result) clauses\n(defn pretty-condp [p [head pred expr & more]]\n  (let [clauses (partition 2 more)\n        default (when (odd? (count more)) (last more))]\n    (list-group\n      (visit p head) \" \" (visit p pred) \" \" (visit p expr) :line\n      (block (concat (map #(pretty-cond-clause p %) clauses)\n                     (when default [(visit p default)]))))))\n\n\n;;; Format arrows, def, if, and similar\n\n(defn pretty-arrow [p [head & stmts]]\n  (list-group\n    (visit p head) \" \"\n    [:align (interpose :line (map #(visit p %) stmts))]))\n\n;;TODO we're also using this to format def – should that be separate?\n(defn pretty-if [p [head test & more]]\n  (list-group\n    (visit p head) \" \" (visit p test) :line\n    (block (map #(visit p %) more))))\n\n\n;;; Format defn, fn, and similar\n\n(defn pretty-method [p [params & body]]\n  (list-group\n    (visit p params) :line\n    (block (map #(visit p %) body))))\n\n(defn pretty-defn [p [head fn-name & more]]\n  (let [[docstring more] (maybe-a string? more)\n        [attr-map more]  (maybe-a map?    more)\n        [params body]    (maybe-a vector? more)\n        params-on-first-line?  (and params (nil? docstring) (nil? attr-map))\n        params-after-attr-map? (and params (not params-on-first-line?))]\n    (list-group\n      (concat [(visit p head) \" \" (visit p fn-name)]\n              (when params-on-first-line? [\" \" (visit p params)]))\n      :line\n      (block (concat (when docstring [(visit p docstring)])\n                     (when attr-map  [(visit p attr-map)])\n                     (when params-after-attr-map? [(visit p params)])\n                     (if body (map #(visit p %) body)\n                              (map #(pretty-method p %) more)))))))\n\n(defn pretty-fn [p [head & more]]\n  (let [[fn-name more] (maybe-a symbol? more)\n        [params body]  (maybe-a vector? more)]\n    (list-group\n      (concat [(visit p head)]\n              (when fn-name [\" \" (visit p fn-name)])\n              (when params  [\" \" (visit p params)]))\n      :line\n      (block (if body (map #(visit p %) body)\n                      (map #(pretty-method p %) more))))))\n\n(defn pretty-fn* [p [_ params body :as form]]\n  (if (and (vector? params) (seq? body))\n    (let [[inits rests] (split-with #(not= % '&) params)\n          params* (merge (if (= (count inits) 1)\n                           {(first inits) '%}\n                           (zipmap inits (map #(symbol (str \\% (inc %))) (range))))\n                         (when (seq rests) {(second rests) '%&}))\n          body* (walk/prewalk-replace params* body)]\n      [:group \"#(\" [:align 2 (interpose :line (map #(visit p %) body*))] \")\"])\n    (pretty-fn p form)))\n\n\n;;; Format ns\n\n(defn pretty-libspec [p [head & clauses]]\n  (list-group\n    (visit p head) \" \"\n    [:align (interpose :line (map #(visit p %) clauses))]))\n\n(defn pretty-ns [p [head ns-sym & more]]\n  (let [[docstring more] (maybe-a string? more)\n        [attr-map specs] (maybe-a map?    more)]\n    (list-group\n      (visit p head) \" \" (visit p ns-sym) :line\n      (block (concat (when docstring [(visit p docstring)])\n                     (when attr-map  [(visit p attr-map)])\n                     (map #(pretty-libspec p %) specs))))))\n\n\n;;; Format deref, quote, unquote, var\n\n(defn pretty-quote [p [macro arg]]\n  [:span (case (keyword (name macro))\n           :deref \"@\", :quote \"'\", :unquote \"~\", :var \"#'\")\n         (visit p arg)])\n\n;;; Format let, loop, and similar\n\n(defn pretty-bindings [p bvec]\n  (let [kvps (for [[k v] (partition 2 bvec)]\n               [:span (visit p k) \" \" [:align (visit p v)]])]\n    [:group \"[\" [:align (interpose [:line \", \"] kvps)] \"]\"]))\n\n(defn pretty-let [p [head bvec & body]]\n  (list-group\n    (visit p head) \" \" (pretty-bindings p bvec) :line\n    (block (map #(visit p %) body))))\n\n\n;;; Types and interfaces\n\n(defn pretty-impls [p opts+specs]\n  ;;TODO parse out opts\n  ;;TODO parse specs and call pretty on methods\n  (block (map #(visit p %) opts+specs)))\n\n(defn pretty-type [p [head fields & opts+specs]]\n  (list-group (visit p head) \" \" (visit p fields) :line\n              (pretty-impls p opts+specs)))\n\n(defn pretty-reify [p [head & opts+specs]]\n  (list-group (visit p head) :line\n              (pretty-impls p opts+specs)))\n\n\n;;; Symbol table\n\n(defn build-symbol-map [dispatch]\n  (into {} (for [[pretty-fn syms] dispatch\n                 sym syms\n                 sym (cons sym (when-not (special-symbol? sym)\n                                 [(symbol \"clojure.core\" (name sym))\n                                  (symbol \"cljs.core\" (name sym))]))]\n             [sym pretty-fn])))\n\n(def default-symbols\n  (build-symbol-map\n    {pretty-arrow '[. .. -> ->> and doto or some-> some->>]\n     pretty-case  '[case cond-> cond->>]\n     pretty-cond  '[cond]\n     pretty-condp '[condp]\n     pretty-defn  '[defmacro defmulti defn defn-]\n     pretty-fn    '[fn]\n     pretty-fn*   '[fn*]\n     pretty-if    '[def defonce if if-not when when-not]\n     pretty-ns    '[ns]\n     pretty-let   '[binding doseq dotimes for if-let if-some let let* loop loop*\n                    when-first when-let when-some with-local-vars with-open with-redefs]\n     pretty-quote '[deref quote unquote var]\n     pretty-type  '[deftype defrecord]\n     pretty-reify '[reify]}))\n\n\n(defn pprint\n  ([x] (pprint x {}))\n  ([x options]\n   (edn/pprint x (merge {:symbols default-symbols} options))))\n","~:reader-features",["^E",["~:cljs"]],"~:used-var-namespaces",["^E",["^O","^R","~$js","^G","^P","^M"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["fipp.clojure/block","nodes","cljs.core.interpose","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","fipp.clojure/list-group","seq11783","self__5712__auto__","cljs.core/seq","fipp.clojure/maybe-a","pred","xs","x","cljs.core/first","cljs.core/rest","p__11788","vec__11792","cljs.core.nth","fipp.clojure/pretty-cond-clause","p","test","result","fipp.visit/visit","p__11801","vec__11802","seq__11803","first__11804","cljs.core/next","fipp.clojure/pretty-case","head","expr","more","clauses","cljs.core.partition","default","cljs.core/odd?","cljs.core/count","cljs.core/last","fipp.clojure.list_group","cljs.core.concat","p1__11796#","cljs.core.map","p__11806","vec__11807","seq__11808","first__11809","fipp.clojure/pretty-cond","p1__11805#","p__11812","vec__11814","seq__11815","first__11816","fipp.clojure/pretty-condp","p1__11811#","p__11818","vec__11819","seq__11820","first__11821","fipp.clojure/pretty-arrow","stmts","p1__11817#","p__11827","vec__11828","seq__11829","first__11830","fipp.clojure/pretty-if","p1__11824#","p__11832","vec__11833","seq__11834","first__11835","fipp.clojure/pretty-method","params","body","p1__11831#","p__11840","vec__11841","seq__11842","first__11843","fipp.clojure/pretty-defn","fn-name","vec__11844","vec__11847","vec__11850","docstring","cljs.core/string?","attr-map","cljs.core/map?","cljs.core/vector?","params-on-first-line?","and__5000__auto__","params-after-attr-map?","cljs.core/not","p1__11836#","p1__11837#","p__11856","vec__11857","seq__11858","first__11859","fipp.clojure/pretty-fn","vec__11860","vec__11863","cljs.core/symbol?","p1__11854#","p1__11855#","p__11871","vec__11872","fipp.clojure/pretty-fn*","_","form","cljs.core/seq?","vec__11875","inits","rests","p1__11867#","cljs.core/split-with","cljs.core.not_EQ_","params*","cljs.core.merge","cljs.core._EQ_","cljs.core/zipmap","p1__11869#","cljs.core.symbol","cljs.core.range","cljs.core/second","body*","clojure.walk/prewalk-replace","p1__11870#","p__11882","vec__11883","seq__11884","first__11885","fipp.clojure/pretty-libspec","p1__11881#","p__11924","vec__11925","seq__11926","first__11927","fipp.clojure/pretty-ns","ns-sym","vec__11928","vec__11931","specs","p1__11895#","p__11941","vec__11942","fipp.clojure/pretty-quote","macro","arg","G__11945","cljs.core/Keyword","js/Error","cljs.core.keyword","cljs.core/name","fipp.clojure/pretty-bindings","bvec","kvps","iter__5480__auto__","s__11948","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__11950","cljs.core/chunk-buffer","i__11949","vec__11951","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__11947","cljs.core/chunk-rest","vec__11954","cljs.core/cons","k","v","p__11959","vec__11960","seq__11961","first__11962","fipp.clojure/pretty-let","p1__11958#","fipp.clojure/pretty-impls","opts+specs","p1__11963#","p__11964","vec__11965","seq__11966","first__11967","fipp.clojure/pretty-type","fields","p__11968","vec__11972","seq__11973","first__11974","fipp.clojure/pretty-reify","fipp.clojure/build-symbol-map","dispatch","cljs.core.into","s__11977","xs__6360__auto__","vec__11984","iterys__5476__auto__","s__11979","s__11981","b__11983","i__11982","iter__11980","fs__5477__auto__","iter__11978","iter__11976","pretty-fn","syms","sym","cljs.core/special-symbol?","fipp.clojure/default-symbols","G__12001","fipp.clojure/pprint","fipp.clojure.pprint","options","fipp.edn.pprint","cljs.core/chunk-first"]],"~:used-vars",["^E",["~$cljs.core/rest","~$fipp.clojure/pretty-cond-clause","~$cljs.core/keyword","~$fipp.clojure/pretty-libspec","~$cljs.core/odd?","~$fipp.clojure/pretty-quote","~$fipp.clojure/pretty-method","~$cljs.core/vector?","~$fipp.clojure/pretty-ns","~$cljs.core/=","~$fipp.clojure/pretty-defn","~$cljs.core/IndexedSeq","~$fipp.clojure/default-symbols","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/last","~$cljs.core/special-symbol?","~$cljs.core/chunk","~$cljs.core/not=","~$cljs.core/string?","~$fipp.clojure/pretty-bindings","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$fipp.clojure/pretty-let","~$fipp.clojure/pretty-fn","~$cljs.core/concat","~$fipp.clojure/pretty-condp","~$cljs.core/into","~$cljs.core/map?","~$fipp.edn/pprint","~$fipp.clojure/pretty-if","~$cljs.core/zipmap","~$cljs.core/map","~$fipp.clojure/block","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/partition","~$cljs.core/symbol","~$fipp.clojure/pretty-impls","~$fipp.clojure/pretty-cond","~$fipp.clojure/list-group","~$cljs.core/nth","~$fipp.clojure/build-symbol-map","~$cljs.core/second","~$fipp.clojure/pretty-case","~$cljs.core/split-with","~$cljs.core/next","~$fipp.clojure/pretty-arrow","~$cljs.core/chunk-cons","~$cljs.core/not","~$fipp.visit/visit","~$cljs.core/cons","~$cljs.core/interpose","~$cljs.core/chunk-buffer","~$cljs.core/symbol?","~$cljs.core/range","~$fipp.clojure/pretty-type","~$fipp.clojure/pprint","~$fipp.clojure/pretty-fn*","~$fipp.clojure/maybe-a","~$cljs.core/first","~$cljs.core/seq?","~$clojure.walk/prewalk-replace","~$cljs.core/name","~$cljs.core/merge","~$js/Error","~$fipp.clojure/pretty-reify","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^16","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^E",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^16","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^16","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3<"]]],["^16","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;"]]],["^16","clojure/core/rrb_vector/rrbt.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","~$clojure.core.rrb-vector.protocols","~$clojure.core.rrb-vector.nodes","~$clojure.core.rrb-vector.trees","~$clojure.core.rrb-vector.transients"]]],["^16","clojure/core/rrb_vector.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","^3C","~$clojure.core.rrb-vector.rrbt","~$clojure.core.rrb-vector.interop"]]],["^16","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","clojure/core/rrb_vector/trees.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","^3D"]]],["^16","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","clojure/core/rrb_vector/nodes.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R"]]],["^16","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","fipp/deque.cljc"],["fde761cd9f5c9bd13e8c91e8b9724573a87f1449","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","~$clojure.core.rrb-vector"]]],["^16","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^39","^3<"]]],["^16","fipp/engine.cljc"],["fde761cd9f5c9bd13e8c91e8b9724573a87f1449","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","~$fipp.deque"]]],["^16","clojure/core/rrb_vector/transients.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","^3D","^3E"]]],["^16","fipp/util.cljc"],["fde761cd9f5c9bd13e8c91e8b9724573a87f1449","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R"]]],["^16","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","fipp/clojure.cljc"],["fde761cd9f5c9bd13e8c91e8b9724573a87f1449","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","^M","^O","^P"]]],["^16","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;"]]],"~:SHADOW-TIMESTAMP",[1744140476000,1744140476000,1744140474000],["^16","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;","~$goog.reflect"]]],["^16","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;","~$goog.fs.blob","^3?","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3A","^3B"]]],["^16","fipp/visit.cljc"],["fde761cd9f5c9bd13e8c91e8b9724573a87f1449","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","~$fipp.util","~$fipp.ednize"]]],["^16","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3A","~$goog.html.SafeUrl","^3B","^3;","^3<"]]],["^16","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3N","~$goog.html.SafeStyle","^3R","^3@","~$goog.html.uncheckedconversions","^3A","^3<"]]],["^16","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","~$goog.dom.TagName","^3;","~$goog.dom.element"]]],["^16","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R"]]],["^16","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3A","^3N","^3W","~$goog.html.SafeStyleSheet","^3R","^3Y","^3@","^3B","^3;","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^3<","~$goog.dom.tags","^3O"]]],["^16","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^42"]]],["^16","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^16","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^41","^3;","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^16","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3:"]]],["^16","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",[]]],["^16","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^41","^42"]]],["^16","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","^47","~$goog.string.StringBuffer"]]],["^16","fipp/edn.cljc"],["fde761cd9f5c9bd13e8c91e8b9724573a87f1449","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","~$clojure.string","^3Q","^O","~$fipp.engine"]]],["^16","clojure/core/rrb_vector/interop.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","^3C","^3G"]]],["^16","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","~$goog.dom.safe","^3X","^3A","^3<"]]],["^16","clojure/core/rrb_vector/protocols.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R"]]],["^16","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3<","^3>"]]],["^16","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","~$goog.flags"]]],["^16","fipp/ednize.cljs"],["fde761cd9f5c9bd13e8c91e8b9724573a87f1449","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^R","^4=","^3P"]]],["^16","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^45","^3Y"]]],["^16","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;","^3V","^3N","^3W","^3[","^3R","^3@","^3A","^3<"]]],["^16","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S"]]],["^16","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","~$goog.math.Long","~$goog.math.Integer","^47","^42","^41","~$goog.Uri","^4<"]]],["^16","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3A","^3B","^3O","^3;"]]],["^16","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3A","^3W","^3B","^42","^3;","^3<"]]],["^16","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3L"]]],["^16","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;","^47"]]],["^16","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^E",[]],"^37",["^S","^3;","^3B"]]]]],"~:clj-info",["^ ","jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1744140473000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/core.rrb-vector/0.1.2/core.rrb-vector-0.1.2.jar!/clojure/core/rrb_vector/macros.clj",1744140475000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1744140473000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1744140473000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1744140473000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1744140473000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1744140473000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1744140474000,"jar:file:/Users/dr.breslove/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1744140473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Provides a pretty document serializer and pprint fn for Clojure code.\n  See fipp.edn for pretty printing Clojure/EDN data structures","^7","fipp/clojure.cljc","^8",1,"^9",5,"^:",1,"^;",17],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F","^G","^H",["^ "],"^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","~$v","^O","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^E",["^U"]],"~:shadow/js-access-global",["^E",["Error"]],"^V",["^ ","^W","^O"],"~:defs",["^ ","~$pretty-bindings",["^ ","~:protocol-inline",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",136,"^9",7,"^:",136,"^;",22,"~:arglists",["^Z",["~$quote",["^Z",[["~$p","~$bvec"]]]]]],"^F","^1Z","^7","fipp/clojure.cljc","^;",22,"~:method-params",["^Z",[["~$p","^5>"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^9",1,"~:variadic?",false,"^8",136,"~:ret-tag","~$cljs.core/IVector","^:",136,"~:max-fixed-arity",2,"~:fn-var",true,"^5<",["^Z",["^5=",["^Z",[["~$p","^5>"]]]]]],"~$pretty-fn*",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",98,"^9",7,"^:",98,"^;",17,"^5<",["^Z",["^5=",["^Z",[["~$p",["~$_","~$params","~$body","^10","~$form"]]]]]]],"^F","^2T","^7","fipp/clojure.cljc","^;",17,"^5?",["^Z",[["~$p","~$p__11871"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",98,"^5C","^5D","^:",98,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["~$_","^5H","^5I","^10","^5J"]]]]]]],"~$pprint",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",191,"^9",7,"^:",191,"^;",13,"^5<",["^Z",["^5=",["^Z",[["~$x"],["~$x","~$options"]]]]],"~:top-fn",["^ ","^5B",false,"~:fixed-arity",2,"^5E",2,"^5?",[["~$x"],["~$x","^5M"]],"^5<",["^Z",[["~$x"],["~$x","^5M"]]],"^5A",["^Z",[null,null]]]],"^F","^2S","^7","fipp/clojure.cljc","^;",13,"^5N",["^ ","^5B",false,"^5O",2,"^5E",2,"^5?",[["~$x"],["~$x","^5M"]],"^5<",["^Z",[["~$x"],["~$x","^5M"]]],"^5A",["^Z",[null,null]]],"^5?",[["~$x"],["~$x","^5M"]],"^5@",null,"^5O",2,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"~:methods",[["^ ","^5O",1,"^5B",false,"~:tag","~$any"],["^ ","^5O",2,"^5B",false,"^5Q","^5R"]],"^8",191,"^:",191,"^5E",2,"^5F",true,"^5<",["^Z",[["~$x"],["~$x","^5M"]]]],"~$pretty-condp",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",41,"^9",7,"^:",41,"^;",19,"^5<",["^Z",["^5=",["^Z",[["~$p",["~$head","~$pred","~$expr","~$&","~$more"]]]]]]],"^F","^24","^7","fipp/clojure.cljc","^;",19,"^5?",["^Z",[["~$p","~$p__11812"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",41,"^5C","^5D","^:",41,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^5U","^5V","~$&","^5W"]]]]]]],"~$pretty-quote",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",129,"^9",7,"^:",129,"^;",19,"^5<",["^Z",["^5=",["^Z",[["~$p",["~$macro","~$arg"]]]]]]],"^F","^1I","^7","fipp/clojure.cljc","^;",19,"^5?",["^Z",[["~$p","~$p__11941"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",129,"^5C","^5D","^:",129,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5Z","^5["]]]]]]],"~$maybe-a",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",17,"^9",7,"^:",17,"^;",14,"^5<",["^Z",["^5=",["^Z",[["^5U","~$xs"]]]]]],"^F","^2U","^7","fipp/clojure.cljc","^;",14,"^5?",["^Z",[["^5U","^62"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",17,"^5C","^5D","^:",17,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["^5U","^62"]]]]]],"~$pretty-libspec",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",112,"^9",7,"^:",112,"^;",21,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","~$clauses"]]]]]]],"^F","^1G","^7","fipp/clojure.cljc","^;",21,"^5?",["^Z",[["~$p","~$p__11882"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",112,"^5C","^5D","^:",112,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","^64"]]]]]]],"~$pretty-method",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",66,"^9",7,"^:",66,"^;",20,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5H","~$&","^5I"]]]]]]],"^F","^1J","^7","fipp/clojure.cljc","^;",20,"^5?",["^Z",[["~$p","~$p__11832"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",66,"^5C","^5D","^:",66,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5H","~$&","^5I"]]]]]]],"~$pretty-cond-clause",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",23,"^9",7,"^:",23,"^;",25,"^5<",["^Z",["^5=",["^Z",[["~$p",["~$test","~$result"]]]]]]],"^F","^1E","^7","fipp/clojure.cljc","^;",25,"^5?",["^Z",[["~$p","~$p__11788"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",23,"^5C","^5D","^:",23,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^69","^6:"]]]]]]],"~$block",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",11,"^9",7,"^:",11,"^;",12,"^5<",["^Z",["^5=",["^Z",[["~$nodes"]]]]]],"^F","^2;","^7","fipp/clojure.cljc","^;",12,"^5?",["^Z",[["^6="]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",11,"^5C","^5D","^:",11,"^5E",1,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["^6="]]]]]],"~$pretty-cond",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",34,"^9",7,"^:",34,"^;",18,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","^5W"]]]]]]],"^F","^2A","^7","fipp/clojure.cljc","^;",18,"^5?",["^Z",[["~$p","~$p__11806"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",34,"^5C","^5D","^:",34,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","^5W"]]]]]]],"~$pretty-fn",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",87,"^9",7,"^:",87,"^;",16,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","^5W"]]]]]]],"^F","^22","^7","fipp/clojure.cljc","^;",16,"^5?",["^Z",[["~$p","~$p__11856"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",87,"^5C","^5D","^:",87,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","^5W"]]]]]]],"~$pretty-arrow",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",52,"^9",7,"^:",52,"^;",19,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","~$stmts"]]]]]]],"^F","^2I","^7","fipp/clojure.cljc","^;",19,"^5?",["^Z",[["~$p","~$p__11818"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",52,"^5C","^5D","^:",52,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","^6C"]]]]]]],"~$default-symbols",["^ ","^F","^1P","^7","fipp/clojure.cljc","^8",173,"^9",1,"^:",173,"^;",21,"^5",["^ ","^7","fipp/clojure.cljc","^8",173,"^9",6,"^:",173,"^;",21],"^5Q",["^E",[null,"~$clj","^5R"]]],"~$build-symbol-map",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",165,"^9",7,"^:",165,"^;",23,"^5<",["^Z",["^5=",["^Z",[["~$dispatch"]]]]]],"^F","^2D","^7","fipp/clojure.cljc","^;",23,"^5?",["^Z",[["^6H"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",165,"^5C",["^E",[null,"^6F","^5R"]],"^:",165,"^5E",1,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["^6H"]]]]]],"~$pretty-reify",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",158,"^9",7,"^:",158,"^;",19,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","~$opts+specs"]]]]]]],"^F","^30","^7","fipp/clojure.cljc","^;",19,"^5?",["^Z",[["~$p","~$p__11968"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",158,"^5C","^5D","^:",158,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$&","^6J"]]]]]]],"~$pretty-let",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",141,"^9",7,"^:",141,"^;",17,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^5>","~$&","^5I"]]]]]]],"^F","^21","^7","fipp/clojure.cljc","^;",17,"^5?",["^Z",[["~$p","~$p__11959"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",141,"^5C","^5D","^:",141,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^5>","~$&","^5I"]]]]]]],"~$pretty-type",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",154,"^9",7,"^:",154,"^;",18,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$fields","~$&","^6J"]]]]]]],"^F","^2R","^7","fipp/clojure.cljc","^;",18,"^5?",["^Z",[["~$p","~$p__11964"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",154,"^5C","^5D","^:",154,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^6O","~$&","^6J"]]]]]]],"~$pretty-if",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",58,"^9",7,"^:",58,"^;",16,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^69","~$&","^5W"]]]]]]],"^F","^28","^7","fipp/clojure.cljc","^;",16,"^5?",["^Z",[["~$p","~$p__11827"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",58,"^5C","^5D","^:",58,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^69","~$&","^5W"]]]]]]],"~$pretty-defn",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",71,"^9",7,"^:",71,"^;",18,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$fn-name","~$&","^5W"]]]]]]],"^F","^1N","^7","fipp/clojure.cljc","^;",18,"^5?",["^Z",[["~$p","~$p__11840"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",71,"^5C","^5D","^:",71,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^6T","~$&","^5W"]]]]]]],"~$pretty-ns",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",117,"^9",7,"^:",117,"^;",16,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","~$ns-sym","~$&","^5W"]]]]]]],"^F","^1L","^7","fipp/clojure.cljc","^;",16,"^5?",["^Z",[["~$p","~$p__11924"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",117,"^5C","^5D","^:",117,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^6W","~$&","^5W"]]]]]]],"~$pretty-impls",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",149,"^9",7,"^:",149,"^;",19,"^5<",["^Z",["^5=",["^Z",[["~$p","^6J"]]]]]],"^F","^2@","^7","fipp/clojure.cljc","^;",19,"^5?",["^Z",[["~$p","^6J"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",149,"^5C","^5D","^:",149,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p","^6J"]]]]]],"~$list-group",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",14,"^9",7,"^:",14,"^;",17,"^5<",["^Z",["^5=",["^Z",[["~$&","^6="]]]]],"^5N",["^ ","^5B",true,"^5O",0,"^5E",0,"^5?",[["^Z",["^6="]]],"^5<",["^Z",[["~$&","^6="]]],"^5A",["^Z",[null]]]],"^F","^2B","^7","fipp/clojure.cljc","^;",17,"^5N",["^ ","^5B",true,"^5O",0,"^5E",0,"^5?",[["^Z",["^6="]]],"^5<",["^Z",[["~$&","^6="]]],"^5A",["^Z",[null]]],"^5?",[["^Z",["^6="]]],"^5@",null,"^5O",0,"^5A",["^Z",[null]],"^9",1,"^5B",true,"^5P",[["^ ","^5O",0,"^5B",true,"^5Q","^5D"]],"^8",14,"^5C","^5R","^:",14,"^5E",0,"^5F",true,"^5<",["^Z",[["~$&","^6="]]]],"~$pretty-case",["^ ","^5;",null,"^5",["^ ","^7","fipp/clojure.cljc","^8",26,"^9",7,"^:",26,"^;",18,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^5V","~$&","^5W"]]]]]]],"^F","^2F","^7","fipp/clojure.cljc","^;",18,"^5?",["^Z",[["~$p","~$p__11801"]]],"^5@",null,"^5A",["^Z",[null,null]],"^9",1,"^5B",false,"^8",26,"^5C","^5D","^:",26,"^5E",2,"^5F",true,"^5<",["^Z",["^5=",["^Z",[["~$p",["^5T","^5V","~$&","^5W"]]]]]]]],"^X",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^E",["~$&","~$when-first","~$cond->>","~:nest","~:align","~$%&","~:group","~$..","~$if-not","~$doseq","~$deftype","~$when-let","~$loop*","~$if-some","~$let","~$->","~$doto","~$fn","~$when-not","~$when","~$some->>","~$defn","~$if","~$%","^[","~$unquote","~$or","~$let*","~$cond->","~$dotimes","~$reify","^8","~$with-open","~$fn*","~$defonce","~$defn-","~$loop","~$condp","~$cond","~$some->","~$for","~$binding","~$with-local-vars","~$defmacro","~$with-redefs","~$.","~$var","^5=","~$defmulti","~$if-let","~$case","~$deref","~$defrecord","~$and","~:symbols","~$when-some","~$def","~$->>","~:span"]],"~:order",["^74","^8","^77","^75","~$&","~$%","^76","^8:","^7O","^7S","^83","^5=","^7H","^7[","^7T","^7B","~$.","^78","^7@","^89","^85","^7A","^7I","^7U","^7E","^7M","^7W","^7:","^7L","^7V","^81","^7>","^7?","^7J","^7R","^7=","^72","^7<","^87","^7X","^7N","^7Z","^7;","^84","^88","^7P","^7G","^79","^7D","^7C","^7Y","^80","^7F","^7Q","^[","^82","^7K","^73","^86"]],"^12",["^ ","^U",["^E",[]]],"^13",[],"^14",["^S","^R","^M","^O","^P"]],"^J","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^E",[]],"~:compiler-options",["^33",[["^8>","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^8>","~:shadow-tweaks"],null,["^8>","~:source-map-inline"],null,["^8>","~:shadow-optimize-constants"],null,["^8>","~:elide-asserts"],false,["^8>","~:optimize-constants"],null,["^8>","^19"],null,["^8>","~:external-config"],null,["^8>","~:tooling-config"],null,["^8>","~:emit-constants"],null,["^8>","~:load-tests"],true,["^8>","~:form-size-threshold"],null,["^8>","~:global-goog-object&array"],null,["^8>","~:data-readers"],null,["~:shadow.build/config","~:target"],"~:karma",["^8>","~:infer-externs"],"~:auto",["^8>","^1;"],null,["^8@","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8>","~:fn-invoke-direct"],null,["^8>","~:source-map"],true]]]